{
  "openapi": "3.0.2",
  "info": {
    "title": "Keycloak Admin REST API",
    "description": "This is a REST API reference for the Keycloak Admin",
    "version": "1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Root",
          "Default"
        ],
        "summary": "Get themes, social providers, auth providers, and event listeners available on this server",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerInfoRepresentation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Import a realm   Imports a realm from a full representation of that realm.",
        "requestBody": {
          "description": "JSON representation of the realm",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealmRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      }
    },
    "/{id}/name": {
      "get": {
        "tags": [
          "User Storage Provider",
          "Default"
        ],
        "summary": "Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get the top-level representation of the realm   It will not include nested information like User and Client representations.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealmRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealmRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Delete the realm",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/admin-events": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get admin events   Returns all admin events, or filters events based on URL query parameters listed here",
        "parameters": [
          {
            "in": "query",
            "name": "authClient",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "authIpAddress",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "authRealm",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "authUser",
            "description": "user id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "dateTo",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "operationTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "resourcePath",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "resourceTypes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminEventRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Delete all admin events",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/attack-detection/brute-force/users": {
      "delete": {
        "tags": [
          "Attack Detection",
          "Default"
        ],
        "summary": "Clear any user login failures for all users   This can release temporary disabled users",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/attack-detection/brute-force/users/{userId}": {
      "get": {
        "tags": [
          "Attack Detection",
          "Default"
        ],
        "summary": "Get status of a username in brute force detection",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Attack Detection",
          "Default"
        ],
        "summary": "Clear any user login failures for the user   This can release temporary disabled user",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/authenticator-providers": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get authenticator providers   Returns a list of authenticator providers.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/client-authenticator-providers": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get client authenticator providers   Returns a list of client authenticator providers.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/config-description/{providerId}": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get authenticator provider’s configuration description",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatorConfigInfoRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "providerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/config/{id}": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get authenticator configuration",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Update authenticator configuration",
        "requestBody": {
          "description": "JSON describing new state of authenticator configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Delete authenticator configuration",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "Configuration id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/executions": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Add new authentication execution",
        "requestBody": {
          "description": "JSON model describing authentication execution",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationExecutionRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get Single Execution",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Delete execution",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "executionId",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}/config": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Update execution with new configuration",
        "requestBody": {
          "description": "JSON with new configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "executionId",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}/lower-priority": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Lower execution’s priority",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "executionId",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}/raise-priority": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Raise execution’s priority",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "executionId",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/flows": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get authentication flows   Returns a list of authentication flows.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Create a new authentication flow",
        "requestBody": {
          "description": "Authentication flow representation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/copy": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object",
        "requestBody": {
          "description": "JSON containing 'newName' attribute",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "flowAlias",
          "description": "Name of the existing authentication flow",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/executions": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get authentication executions for a flow",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "put": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Update authentication executions of a flow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationExecutionInfoRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "flowAlias",
          "description": "Flow alias",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/executions/execution": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Add new authentication execution to a flow",
        "requestBody": {
          "description": "New execution JSON data containing 'provider' attribute",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "flowAlias",
          "description": "Alias of parent flow",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/executions/flow": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Add new flow with new execution to existing flow",
        "requestBody": {
          "description": "New authentication flow / execution JSON data containing 'alias', 'type', 'provider', and 'description' attributes",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "flowAlias",
          "description": "Alias of parent authentication flow",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/flows/{id}": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get authentication flow for id",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Update an authentication flow",
        "requestBody": {
          "description": "Authentication flow representation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Delete an authentication flow",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "Flow id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/form-action-providers": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get form action providers   Returns a list of form action providers.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/form-providers": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get form providers   Returns a list of form providers.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/per-client-config-description": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get configuration descriptions for all clients",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/register-required-action": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Register a new required actions",
        "requestBody": {
          "description": "JSON containing 'providerId', and 'name' attributes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/required-actions": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get required actions   Returns a list of required actions.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/required-actions/{alias}": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get required action for alias",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Update required action",
        "requestBody": {
          "description": "JSON describing new state of required action",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Delete required action",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "description": "Alias of required action",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/required-actions/{alias}/lower-priority": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Lower required action’s priority",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "description": "Alias of required action",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/required-actions/{alias}/raise-priority": {
      "post": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Raise required action’s priority",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "description": "Alias of required action",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/authentication/unregistered-required-actions": {
      "get": {
        "tags": [
          "Authentication Management",
          "Default"
        ],
        "summary": "Get unregistered required actions   Returns a list of unregistered required actions.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clear-keys-cache": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Clear cache of external public keys (Public keys of clients or Identity providers)",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clear-realm-cache": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Clear realm cache",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clear-user-cache": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Clear user cache",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-description-converter": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Base path for importing clients under this realm.",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-registration-policy/providers": {
      "get": {
        "tags": [
          "Client Registration Policy",
          "Default"
        ],
        "summary": "Base path for retrieve providers with the configProperties properly filled",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentTypeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes": {
      "get": {
        "tags": [
          "Client Scopes",
          "Default"
        ],
        "summary": "Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client Scopes",
          "Default"
        ],
        "summary": "Create a new client scope   Client Scope’s name must be unique!",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientScopeRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}": {
      "get": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Get mapper by id",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Update the mapper",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Delete the mapper",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id1",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id2",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}": {
      "get": {
        "tags": [
          "Client Scopes",
          "Default"
        ],
        "summary": "Get representation of the client scope",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientScopeRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Client Scopes",
          "Default"
        ],
        "summary": "Update the client scope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientScopeRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Client Scopes",
          "Default"
        ],
        "summary": "Delete the client scope",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/protocol-mappers/add-models": {
      "post": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Create multiple mappers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/protocol-mappers/models": {
      "get": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Get mappers",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Create a mapper",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}": {
      "get": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Get mappers by name for a specific protocol",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "protocol",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get all scope mappings for the client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get the roles associated with a client’s scope   Returns roles for the client.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Add client-level roles to the client’s scope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Remove client-level roles from the client’s scope.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "The available client-level roles   Returns the roles for the client that can be associated with the client’s scope",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get effective client roles   Returns the roles for the client that are associated with the client’s scope.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/realm": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get realm-level roles associated with the client’s scope",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Add a set of realm-level roles to the client’s scope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Remove a set of realm-level roles from the client’s scope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/realm/available": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get realm-level roles that are available to attach to this client’s scope",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/realm/composite": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/client-session-stats": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get client session stats   Returns a JSON map.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get clients belonging to the realm   Returns a list of clients belonging to the realm",
        "parameters": [
          {
            "in": "query",
            "name": "clientId",
            "description": "filter by clientId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "viewableOnly",
            "description": "filter clients that cannot be viewed in full by admin",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Create a new client   Client’s client_id must be unique!",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients-initial-access": {
      "get": {
        "tags": [
          "Client Initial Access",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientInitialAccessPresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client Initial Access",
          "Default"
        ],
        "summary": "Create a new initial access token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientInitialAccessCreatePresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInitialAccessPresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients-initial-access/{id}": {
      "delete": {
        "tags": [
          "Client Initial Access",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id1}/protocol-mappers/models/{id2}": {
      "get": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Get mapper by id",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Update the mapper",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Delete the mapper",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id1",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id2",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get representation of the client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Update the client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Delete the client",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}": {
      "get": {
        "tags": [
          "Client Attribute Certificate",
          "Default"
        ],
        "summary": "Get key info",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "attr",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/download": {
      "post": {
        "tags": [
          "Client Attribute Certificate",
          "Default"
        ],
        "summary": "Get a keystore file for the client, containing private key and public certificate",
        "requestBody": {
          "description": "Keystore configuration as JSON",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyStoreConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "attr",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/generate": {
      "post": {
        "tags": [
          "Client Attribute Certificate",
          "Default"
        ],
        "summary": "Generate a new certificate with new key pair",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "attr",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/generate-and-download": {
      "post": {
        "tags": [
          "Client Attribute Certificate",
          "Default"
        ],
        "summary": "Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.",
        "requestBody": {
          "description": "Keystore configuration as JSON",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyStoreConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "attr",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/upload": {
      "post": {
        "tags": [
          "Client Attribute Certificate",
          "Default"
        ],
        "summary": "Upload certificate and eventually private key",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "attr",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/upload-certificate": {
      "post": {
        "tags": [
          "Client Attribute Certificate",
          "Default"
        ],
        "summary": "Upload only certificate, not private key",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "attr",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/client-secret": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get the client secret",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRepresentation"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Generate a new secret for the client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/default-client-scopes": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get default client scopes.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}": {
      "put": {
        "tags": [
          "Clients",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Clients",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "clientScopeId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Create JSON with payload of example access token",
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/protocol-mappers": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Return list of all protocol mappers, which will be used when generating tokens issued for particular client.",
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.",
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "roleContainerId",
          "description": "either realm name OR client UUID",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.",
        "parameters": [
          {
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "roleContainerId",
          "description": "either realm name OR client UUID",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/installation/providers/{providerId}": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "providerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/management/permissions": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/nodes": {
      "post": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/nodes/{node}": {
      "delete": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Unregister a cluster node from the client",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "node",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/offline-session-count": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get application offline session count   Returns a number of offline user sessions associated with this client   {      \"count\": number  }",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/offline-sessions": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get offline sessions for client   Returns a list of offline user sessions associated with this client",
        "parameters": [
          {
            "in": "query",
            "name": "first",
            "description": "Paging offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/optional-client-scopes": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get optional client scopes.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}": {
      "put": {
        "tags": [
          "Clients",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Clients",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "clientScopeId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/protocol-mappers/add-models": {
      "post": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Create multiple mappers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/protocol-mappers/models": {
      "get": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Get mappers",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Create a mapper",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}": {
      "get": {
        "tags": [
          "Protocol Mappers",
          "Default"
        ],
        "summary": "Get mappers by name for a specific protocol",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "protocol",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/push-revocation": {
      "post": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalRequestResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/registration-access-token": {
      "post": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Generate a new registration access token for the client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/roles": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get all roles for the realm or client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Create a new role for the realm or client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get a role by name",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Update a role by name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Delete a role by name",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/composites": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get composites of the role",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Add a composite to the role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Remove roles from the role’s composite",
        "requestBody": {
          "description": "roles to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "An app-level roles for the specified app for the role’s composite",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/composites/realm": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get realm-level roles of the role’s composite",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/management/permissions": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/users": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Return List of Users that have the specified role name",
        "parameters": [
          {
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get all scope mappings for the client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/clients/{client}": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get the roles associated with a client’s scope   Returns roles for the client.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Add client-level roles to the client’s scope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Remove client-level roles from the client’s scope.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/clients/{client}/available": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "The available client-level roles   Returns the roles for the client that can be associated with the client’s scope",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/clients/{client}/composite": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get effective client roles   Returns the roles for the client that are associated with the client’s scope.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/realm": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get realm-level roles associated with the client’s scope",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Add a set of realm-level roles to the client’s scope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Remove a set of realm-level roles from the client’s scope",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/realm/available": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get realm-level roles that are available to attach to this client’s scope",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/realm/composite": {
      "get": {
        "tags": [
          "Scope Mappings",
          "Default"
        ],
        "summary": "Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/service-account-user": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get a user dedicated to the service account",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/session-count": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get application session count   Returns a number of user sessions associated with this client   {      \"count\": number  }",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/test-nodes-available": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalRequestResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/clients/{id}/user-sessions": {
      "get": {
        "tags": [
          "Clients",
          "Default"
        ],
        "summary": "Get user sessions for client   Returns a list of user sessions associated with this client",
        "parameters": [
          {
            "in": "query",
            "name": "first",
            "description": "Paging offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "id of client (not client-id)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/components": {
      "get": {
        "tags": [
          "Component",
          "Default"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "parent",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Component",
          "Default"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/components/{id}": {
      "get": {
        "tags": [
          "Component",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Component",
          "Default"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Component",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/components/{id}/sub-component-types": {
      "get": {
        "tags": [
          "Component",
          "Default"
        ],
        "summary": "List of subcomponent types that are available to configure for a particular parent component.",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentTypeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/default-default-client-scopes": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get realm default client scopes.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/default-default-client-scopes/{clientScopeId}": {
      "put": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "clientScopeId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/default-groups": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get group hierarchy.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/default-groups/{groupId}": {
      "put": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/default-optional-client-scopes": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get realm optional client scopes.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/default-optional-client-scopes/{clientScopeId}": {
      "put": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "clientScopeId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/events": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get events   Returns all events, or filters them based on URL query parameters listed here",
        "parameters": [
          {
            "in": "query",
            "name": "client",
            "description": "App or oauth client name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "description": "From date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "dateTo",
            "description": "To date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "first",
            "description": "Paging offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "ipAddress",
            "description": "IP address",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "description": "The types of events to return",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "user",
            "description": "User id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Delete all events",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/events/config": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Get the events provider configuration   Returns JSON object with events provider configuration",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealmEventsConfigRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Update the events provider   Change the events provider and/or its configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealmEventsConfigRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/group-by-path/{path}": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups": {
      "get": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "Get group hierarchy.",
        "parameters": [
          {
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "create or add a top level realm groupSet or create child.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/count": {
      "get": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "Returns the groups counts.",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "top",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}": {
      "get": {
        "tags": [
          "Groups",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "Update group, ignores subgroups.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Groups",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/children": {
      "post": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "Set or create child.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/management/permissions": {
      "get": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/members": {
      "get": {
        "tags": [
          "Groups",
          "Default"
        ],
        "summary": "Get users   Returns a list of users, filtered according to query parameters",
        "parameters": [
          {
            "in": "query",
            "name": "first",
            "description": "Pagination offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get role mappings",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/clients/{client}": {
      "get": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Get client-level role mappings for the user, and the app",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Add client-level roles to the user role mapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Delete client-level roles from user role mapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/clients/{client}/available": {
      "get": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Get available client-level roles that can be mapped to the user",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/clients/{client}/composite": {
      "get": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Get effective client-level role mappings   This recurses any composite roles",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/realm": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get realm-level role mappings",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Add realm-level role mappings to the user",
        "requestBody": {
          "description": "Roles to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Delete realm-level role mappings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/realm/available": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get realm-level roles that can be mapped",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/realm/composite": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get effective realm-level role mappings   This will recurse all composite roles to get the result.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/import-config": {
      "post": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Import identity provider from uploaded JSON file",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/instances": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Get identity providers",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Create a new identity provider",
        "requestBody": {
          "description": "JSON body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Get the identity provider",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Update the identity provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Delete the identity provider",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/export": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Export public broker configuration for identity provider",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "description": "Format to use",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/management/permissions": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/mapper-types": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Get mapper types for identity provider",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/mappers": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Get mappers for identity provider",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Add a mapper to identity provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/mappers/{id}": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Get mapper by id for the identity provider",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Update a mapper for the identity provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Delete a mapper for the identity provider",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "alias",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "Mapper id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/identity-provider/providers/{provider_id}": {
      "get": {
        "tags": [
          "Identity Providers",
          "Default"
        ],
        "summary": "Get identity providers",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "provider_id",
          "description": "Provider id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/keys": {
      "get": {
        "tags": [
          "Key",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysMetadataRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/logout-all": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Removes all user sessions.",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/partial-export": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Partial export of existing realm into a JSON file.",
        "parameters": [
          {
            "in": "query",
            "name": "exportClients",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "exportGroupsAndRoles",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealmRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/partialImport": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Partial import from a JSON file to an existing realm.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialImportRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/push-revocation": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Push the realm’s revocation policy to any client that has an admin url associated with it.",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get all roles for the realm or client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Create a new role for the realm or client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}": {
      "get": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Get a specific role’s representation",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Update the role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Delete the role",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-id",
          "description": "id of role",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/composites": {
      "get": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Get role’s children   Returns a set of role’s children provided the role is a composite.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Make the role a composite role by associating some child roles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Remove a set of roles from the role’s composite",
        "requestBody": {
          "description": "A set of roles to be removed",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-id",
          "description": "Role id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/composites/clients/{client}": {
      "get": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Get client-level roles for the client that are in the role’s composite",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/composites/realm": {
      "get": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Get realm-level roles that are in the role’s composite",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/management/permissions": {
      "get": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles (by ID)",
          "Default"
        ],
        "summary": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles/{role-name}": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get a role by name",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Update a role by name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Delete a role by name",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles/{role-name}/composites": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get composites of the role",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Add a composite to the role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Remove roles from the role’s composite",
        "requestBody": {
          "description": "roles to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles/{role-name}/composites/clients/{client}": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "An app-level roles for the specified app for the role’s composite",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles/{role-name}/composites/realm": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Get realm-level roles of the role’s composite",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "description": "role’s name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles/{role-name}/management/permissions": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/roles/{role-name}/users": {
      "get": {
        "tags": [
          "Roles",
          "Default"
        ],
        "summary": "Return List of Users that have the specified role name",
        "parameters": [
          {
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "role-name",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/sessions/{session}": {
      "delete": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Remove a specific user session.",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "session",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/testLDAPConnection": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Test LDAP connection",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/testSMTPConnection/{config}": {
      "post": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "summary": "Test SMTP connection with current logged in user",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "config",
          "description": "SMTP server configuration",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/user-storage/{id}/name": {
      "get": {
        "tags": [
          "User Storage Provider",
          "Default"
        ],
        "summary": "Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/user-storage/{id}/remove-imported-users": {
      "post": {
        "tags": [
          "User Storage Provider",
          "Default"
        ],
        "summary": "Remove imported users",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/user-storage/{id}/sync": {
      "post": {
        "tags": [
          "User Storage Provider",
          "Default"
        ],
        "summary": "Trigger sync of users   Action can be \"triggerFullSync\" or \"triggerChangedUsersSync\"",
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynchronizationResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/user-storage/{id}/unlink-users": {
      "post": {
        "tags": [
          "User Storage Provider",
          "Default"
        ],
        "summary": "Unlink imported users from a storage provider",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/user-storage/{parentId}/mappers/{id}/sync": {
      "post": {
        "tags": [
          "User Storage Provider",
          "Default"
        ],
        "summary": "Trigger sync of mapper data related to ldap mapper (roles, groups, …​)   direction is \"fedToKeycloak\" or \"keycloakToFed\"",
        "parameters": [
          {
            "in": "query",
            "name": "direction",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynchronizationResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "parentId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Get users   Returns a list of users, filtered according to query parameters",
        "parameters": [
          {
            "in": "query",
            "name": "briefRepresentation",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "firstName",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search",
            "description": "A String contained in username, first or last name, or email",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Create a new user   Username must be unique.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users-management-permissions": {
      "get": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Realms Admin",
          "Default"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/count": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Get representation of the user",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Update the user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Delete the user",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/consents": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Get consents granted by the user",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/consents/{client}": {
      "delete": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Revoke consent and offline tokens for particular client from user",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "description": "Client id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/disable-credential-types": {
      "put": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Disable all credentials for a user of a specific type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/execute-actions-email": {
      "put": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.",
        "parameters": [
          {
            "in": "query",
            "name": "client_id",
            "description": "Client id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "lifespan",
            "description": "Number of seconds after which the generated token expires",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "redirect_uri",
            "description": "Redirect uri",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "description": "required actions the user needs to complete",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/federated-identity": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Get social logins associated with the user",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FederatedIdentityRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/federated-identity/{provider}": {
      "post": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Add a social login provider to the user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FederatedIdentityRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Remove a social login provider from user",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "provider",
          "description": "Social login provider id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/groups": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "first",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "max",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/groups/count": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/groups/{groupId}": {
      "put": {
        "tags": [
          "Users",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Users",
          "Default"
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/impersonation": {
      "post": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Impersonate the user",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/logout": {
      "post": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/offline-sessions/{clientId}": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Get offline sessions associated with the user and client",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "clientId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/remove-totp": {
      "put": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Remove TOTP from the user",
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/reset-password": {
      "put": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Set up a new password for the user.",
        "requestBody": {
          "description": "The representation must contain a value and the type equals to \"password\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRepresentation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get role mappings",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/clients/{client}": {
      "get": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Get client-level role mappings for the user, and the app",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Add client-level roles to the user role mapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Delete client-level roles from user role mapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/clients/{client}/available": {
      "get": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Get available client-level roles that can be mapped to the user",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/clients/{client}/composite": {
      "get": {
        "tags": [
          "Client Role Mappings",
          "Default"
        ],
        "summary": "Get effective client-level role mappings   This recurses any composite roles",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "client",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/realm": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get realm-level role mappings",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Add realm-level role mappings to the user",
        "requestBody": {
          "description": "Roles to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "delete": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Delete realm-level role mappings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/realm/available": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get realm-level roles that can be mapped",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/realm/composite": {
      "get": {
        "tags": [
          "Role Mapper",
          "Default"
        ],
        "summary": "Get effective realm-level role mappings   This will recurse all composite roles to get the result.",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/send-verify-email": {
      "put": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Send an email-verification email to the user   An email contains a link the user can click to verify their email address.",
        "parameters": [
          {
            "in": "query",
            "name": "client_id",
            "description": "Client id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "redirect_uri",
            "description": "Redirect uri",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "2XX": {
            "description": "success"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    },
    "/{realm}/users/{id}/sessions": {
      "get": {
        "tags": [
          "Users",
          "Default"
        ],
        "summary": "Get sessions associated with the user",
        "responses": {
          "2XX": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "realm",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        },
        {
          "in": "path",
          "name": "id",
          "description": "User id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "style": "simple"
        }
      ]
    }
  },
  "components": {
    "securitySchemes": {
      "access_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": null
      }
    },
    "schemas": {
      "AccessToken": {
        "type": "object",
        "properties": {
          "acr": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressClaimSet"
          },
          "allowed-origins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "at_hash": {
            "type": "string"
          },
          "auth_time": {
            "type": "integer",
            "format": "int32"
          },
          "authorization": {
            "$ref": "#/components/schemas/AccessToken-Authorization"
          },
          "azp": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "c_hash": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "ACCESS",
              "ID",
              "ADMIN",
              "USERINFO"
            ]
          },
          "claims_locales": {
            "type": "string"
          },
          "cnf": {
            "$ref": "#/components/schemas/AccessToken-CertConf"
          },
          "email": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "exp": {
            "type": "integer",
            "format": "int32"
          },
          "family_name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "given_name": {
            "type": "string"
          },
          "iat": {
            "type": "integer",
            "format": "int32"
          },
          "iss": {
            "type": "string"
          },
          "jti": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "otherClaims": {
            "type": "object",
            "additionalProperties": true
          },
          "phone_number": {
            "type": "string"
          },
          "phone_number_verified": {
            "type": "boolean"
          },
          "picture": {
            "type": "string"
          },
          "preferred_username": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "realm_access": {
            "$ref": "#/components/schemas/AccessToken-Access"
          },
          "s_hash": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "session_state": {
            "type": "string"
          },
          "sub": {
            "type": "string"
          },
          "trusted-certs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "typ": {
            "type": "string"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "website": {
            "type": "string"
          },
          "zoneinfo": {
            "type": "string"
          }
        }
      },
      "AccessToken-Access": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "verify_caller": {
            "type": "boolean"
          }
        }
      },
      "AccessToken-Authorization": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "AccessToken-CertConf": {
        "type": "object",
        "properties": {
          "x5t#S256": {
            "type": "string"
          }
        }
      },
      "AddressClaimSet": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "formatted": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "street_address": {
            "type": "string"
          }
        }
      },
      "AdminEventRepresentation": {
        "type": "object",
        "properties": {
          "authDetails": {
            "$ref": "#/components/schemas/AuthDetailsRepresentation"
          },
          "error": {
            "type": "string"
          },
          "operationType": {
            "type": "string"
          },
          "realmId": {
            "type": "string"
          },
          "representation": {
            "type": "string"
          },
          "resourcePath": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AuthDetailsRepresentation": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "realmId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "AuthenticationExecutionExportRepresentation": {
        "type": "object",
        "properties": {
          "authenticator": {
            "type": "string"
          },
          "authenticatorConfig": {
            "type": "string"
          },
          "authenticatorFlow": {
            "type": "boolean"
          },
          "autheticatorFlow": {
            "type": "boolean"
          },
          "flowAlias": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "requirement": {
            "type": "string"
          },
          "userSetupAllowed": {
            "type": "boolean"
          }
        }
      },
      "AuthenticationExecutionInfoRepresentation": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "authenticationConfig": {
            "type": "string"
          },
          "authenticationFlow": {
            "type": "boolean"
          },
          "configurable": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          },
          "flowId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "providerId": {
            "type": "string"
          },
          "requirement": {
            "type": "string"
          },
          "requirementChoices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuthenticationExecutionRepresentation": {
        "type": "object",
        "properties": {
          "authenticator": {
            "type": "string"
          },
          "authenticatorConfig": {
            "type": "string"
          },
          "authenticatorFlow": {
            "type": "boolean"
          },
          "autheticatorFlow": {
            "type": "boolean"
          },
          "flowId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "parentFlow": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "requirement": {
            "type": "string"
          }
        }
      },
      "AuthenticationFlowRepresentation": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "authenticationExecutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationExecutionExportRepresentation"
            }
          },
          "builtIn": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "topLevel": {
            "type": "boolean"
          }
        }
      },
      "AuthenticatorConfigInfoRepresentation": {
        "type": "object",
        "properties": {
          "helpText": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          },
          "providerId": {
            "type": "string"
          }
        }
      },
      "AuthenticatorConfigRepresentation": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "id": {
            "type": "string"
          }
        }
      },
      "CertificateRepresentation": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          },
          "privateKey": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        }
      },
      "ClientInitialAccessCreatePresentation": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "expiration": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClientInitialAccessPresentation": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "expiration": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "remainingCount": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ClientMappingsRepresentation": {
        "type": "object",
        "properties": {
          "client": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRepresentation"
            }
          }
        }
      },
      "ClientRepresentation": {
        "type": "object",
        "properties": {
          "access": {
            "type": "object",
            "additionalProperties": true
          },
          "adminUrl": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true
          },
          "authenticationFlowBindingOverrides": {
            "type": "object",
            "additionalProperties": true
          },
          "authorizationServicesEnabled": {
            "type": "boolean"
          },
          "authorizationSettings": {
            "$ref": "#/components/schemas/ResourceServerRepresentation"
          },
          "baseUrl": {
            "type": "string"
          },
          "bearerOnly": {
            "type": "boolean"
          },
          "clientAuthenticatorType": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "consentRequired": {
            "type": "boolean"
          },
          "defaultClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "directAccessGrantsEnabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "frontchannelLogout": {
            "type": "boolean"
          },
          "fullScopeAllowed": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "implicitFlowEnabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nodeReRegistrationTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "notBefore": {
            "type": "integer",
            "format": "int32"
          },
          "optionalClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "protocolMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolMapperRepresentation"
            }
          },
          "publicClient": {
            "type": "boolean"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "registeredNodes": {
            "type": "object",
            "additionalProperties": true
          },
          "registrationAccessToken": {
            "type": "string"
          },
          "rootUrl": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "serviceAccountsEnabled": {
            "type": "boolean"
          },
          "standardFlowEnabled": {
            "type": "boolean"
          },
          "surrogateAuthRequired": {
            "type": "boolean"
          },
          "webOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation": {
        "type": "object",
        "properties": {
          "containerId": {
            "type": "string"
          },
          "containerName": {
            "type": "string"
          },
          "containerType": {
            "type": "string"
          },
          "mapperId": {
            "type": "string"
          },
          "mapperName": {
            "type": "string"
          },
          "protocolMapper": {
            "type": "string"
          }
        }
      },
      "ClientScopeRepresentation": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": true
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "protocolMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolMapperRepresentation"
            }
          }
        }
      },
      "ComponentExportRepresentation": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/MultivaluedHashMap"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "subComponents": {
            "$ref": "#/components/schemas/MultivaluedHashMap"
          },
          "subType": {
            "type": "string"
          }
        }
      },
      "ComponentRepresentation": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/MultivaluedHashMap"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "providerType": {
            "type": "string"
          },
          "subType": {
            "type": "string"
          }
        }
      },
      "ComponentTypeRepresentation": {
        "type": "object",
        "properties": {
          "helpText": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          }
        }
      },
      "ConfigPropertyRepresentation": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "type": "object"
          },
          "helpText": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secret": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CredentialRepresentation": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/MultivaluedHashMap"
          },
          "counter": {
            "type": "integer",
            "format": "int32"
          },
          "createdDate": {
            "type": "integer",
            "format": "int64"
          },
          "device": {
            "type": "string"
          },
          "digits": {
            "type": "integer",
            "format": "int32"
          },
          "hashIterations": {
            "type": "integer",
            "format": "int32"
          },
          "hashedSaltedValue": {
            "type": "string"
          },
          "period": {
            "type": "integer",
            "format": "int32"
          },
          "salt": {
            "type": "string"
          },
          "temporary": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "EventRepresentation": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "additionalProperties": true
          },
          "error": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "realmId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "FederatedIdentityRepresentation": {
        "type": "object",
        "properties": {
          "identityProvider": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "GlobalRequestResult": {
        "type": "object",
        "properties": {
          "failedRequests": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "successRequests": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GroupRepresentation": {
        "type": "object",
        "properties": {
          "access": {
            "type": "object",
            "additionalProperties": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true
          },
          "clientRoles": {
            "type": "object",
            "additionalProperties": true
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "realmRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRepresentation"
            }
          }
        }
      },
      "IdentityProviderMapperRepresentation": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "id": {
            "type": "string"
          },
          "identityProviderAlias": {
            "type": "string"
          },
          "identityProviderMapper": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IdentityProviderRepresentation": {
        "type": "object",
        "properties": {
          "addReadTokenRoleOnCreate": {
            "type": "boolean"
          },
          "alias": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "displayName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "firstBrokerLoginFlowAlias": {
            "type": "string"
          },
          "internalId": {
            "type": "string"
          },
          "linkOnly": {
            "type": "boolean"
          },
          "postBrokerLoginFlowAlias": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "storeToken": {
            "type": "boolean"
          },
          "trustEmail": {
            "type": "boolean"
          }
        }
      },
      "KeyStoreConfig": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "keyAlias": {
            "type": "string"
          },
          "keyPassword": {
            "type": "string"
          },
          "realmAlias": {
            "type": "string"
          },
          "realmCertificate": {
            "type": "boolean"
          },
          "storePassword": {
            "type": "string"
          }
        }
      },
      "KeysMetadataRepresentation": {
        "type": "object",
        "properties": {
          "active": {
            "type": "object",
            "additionalProperties": true
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeysMetadataRepresentation-KeyMetadataRepresentation"
            }
          }
        }
      },
      "KeysMetadataRepresentation-KeyMetadataRepresentation": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "certificate": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "providerPriority": {
            "type": "integer",
            "format": "int64"
          },
          "publicKey": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ManagementPermissionReference": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "resource": {
            "type": "string"
          },
          "scopePermissions": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MappingsRepresentation": {
        "type": "object",
        "properties": {
          "clientMappings": {
            "type": "object",
            "additionalProperties": true
          },
          "realmMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRepresentation"
            }
          }
        }
      },
      "MemoryInfoRepresentation": {
        "type": "object",
        "properties": {
          "free": {
            "type": "integer",
            "format": "int64"
          },
          "freeFormated": {
            "type": "string"
          },
          "freePercentage": {
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "totalFormated": {
            "type": "string"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "usedFormated": {
            "type": "string"
          }
        }
      },
      "MultivaluedHashMap": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "loadFactor": {
            "type": "number",
            "format": "float"
          },
          "threshold": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PartialImportRepresentation": {
        "type": "object",
        "properties": {
          "clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientRepresentation"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRepresentation"
            }
          },
          "identityProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderRepresentation"
            }
          },
          "ifResourceExists": {
            "type": "string"
          },
          "policy": {
            "type": "string",
            "enum": [
              "SKIP",
              "OVERWRITE",
              "FAIL"
            ]
          },
          "roles": {
            "$ref": "#/components/schemas/RolesRepresentation"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRepresentation"
            }
          }
        }
      },
      "PasswordPolicyTypeRepresentation": {
        "type": "object",
        "properties": {
          "configType": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "multipleSupported": {
            "type": "boolean"
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": true
          },
          "rsid": {
            "type": "string"
          },
          "rsname": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PolicyRepresentation": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "decisionStrategy": {
            "type": "string",
            "enum": [
              "AFFIRMATIVE",
              "UNANIMOUS",
              "CONSENSUS"
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "logic": {
            "type": "string",
            "enum": [
              "POSITIVE",
              "NEGATIVE"
            ]
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ProfileInfoRepresentation": {
        "type": "object",
        "properties": {
          "disabledFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "experimentalFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "previewFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProtocolMapperRepresentation": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "protocolMapper": {
            "type": "string"
          }
        }
      },
      "ProviderRepresentation": {
        "type": "object",
        "properties": {
          "operationalInfo": {
            "type": "object",
            "additionalProperties": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RealmEventsConfigRepresentation": {
        "type": "object",
        "properties": {
          "adminEventsDetailsEnabled": {
            "type": "boolean"
          },
          "adminEventsEnabled": {
            "type": "boolean"
          },
          "enabledEventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventsEnabled": {
            "type": "boolean"
          },
          "eventsExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "eventsListeners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RealmRepresentation": {
        "type": "object",
        "properties": {
          "accessCodeLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "accessCodeLifespanLogin": {
            "type": "integer",
            "format": "int32"
          },
          "accessCodeLifespanUserAction": {
            "type": "integer",
            "format": "int32"
          },
          "accessTokenLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "accessTokenLifespanForImplicitFlow": {
            "type": "integer",
            "format": "int32"
          },
          "accountTheme": {
            "type": "string"
          },
          "actionTokenGeneratedByAdminLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "actionTokenGeneratedByUserLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "adminEventsDetailsEnabled": {
            "type": "boolean"
          },
          "adminEventsEnabled": {
            "type": "boolean"
          },
          "adminTheme": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true
          },
          "authenticationFlows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
            }
          },
          "authenticatorConfig": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
            }
          },
          "browserFlow": {
            "type": "string"
          },
          "browserSecurityHeaders": {
            "type": "object",
            "additionalProperties": true
          },
          "bruteForceProtected": {
            "type": "boolean"
          },
          "clientAuthenticationFlow": {
            "type": "string"
          },
          "clientScopeMappings": {
            "type": "object",
            "additionalProperties": true
          },
          "clientScopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientScopeRepresentation"
            }
          },
          "clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientRepresentation"
            }
          },
          "components": {
            "$ref": "#/components/schemas/MultivaluedHashMap"
          },
          "defaultDefaultClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultLocale": {
            "type": "string"
          },
          "defaultOptionalClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultSignatureAlgorithm": {
            "type": "string"
          },
          "directGrantFlow": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "displayNameHtml": {
            "type": "string"
          },
          "dockerAuthenticationFlow": {
            "type": "string"
          },
          "duplicateEmailsAllowed": {
            "type": "boolean"
          },
          "editUsernameAllowed": {
            "type": "boolean"
          },
          "emailTheme": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "enabledEventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventsEnabled": {
            "type": "boolean"
          },
          "eventsExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "eventsListeners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failureFactor": {
            "type": "integer",
            "format": "int32"
          },
          "federatedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRepresentation"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRepresentation"
            }
          },
          "id": {
            "type": "string"
          },
          "identityProviderMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
            }
          },
          "identityProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderRepresentation"
            }
          },
          "internationalizationEnabled": {
            "type": "boolean"
          },
          "keycloakVersion": {
            "type": "string"
          },
          "loginTheme": {
            "type": "string"
          },
          "loginWithEmailAllowed": {
            "type": "boolean"
          },
          "maxDeltaTimeSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "maxFailureWaitSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "minimumQuickLoginWaitSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "notBefore": {
            "type": "integer",
            "format": "int32"
          },
          "offlineSessionIdleTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "offlineSessionMaxLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "offlineSessionMaxLifespanEnabled": {
            "type": "boolean"
          },
          "otpPolicyAlgorithm": {
            "type": "string"
          },
          "otpPolicyDigits": {
            "type": "integer",
            "format": "int32"
          },
          "otpPolicyInitialCounter": {
            "type": "integer",
            "format": "int32"
          },
          "otpPolicyLookAheadWindow": {
            "type": "integer",
            "format": "int32"
          },
          "otpPolicyPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "otpPolicyType": {
            "type": "string"
          },
          "otpSupportedApplications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passwordPolicy": {
            "type": "string"
          },
          "permanentLockout": {
            "type": "boolean"
          },
          "protocolMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolMapperRepresentation"
            }
          },
          "quickLoginCheckMilliSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "realm": {
            "type": "string"
          },
          "refreshTokenMaxReuse": {
            "type": "integer",
            "format": "int32"
          },
          "registrationAllowed": {
            "type": "boolean"
          },
          "registrationEmailAsUsername": {
            "type": "boolean"
          },
          "registrationFlow": {
            "type": "string"
          },
          "rememberMe": {
            "type": "boolean"
          },
          "requiredActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
            }
          },
          "resetCredentialsFlow": {
            "type": "string"
          },
          "resetPasswordAllowed": {
            "type": "boolean"
          },
          "revokeRefreshToken": {
            "type": "boolean"
          },
          "roles": {
            "$ref": "#/components/schemas/RolesRepresentation"
          },
          "scopeMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeMappingRepresentation"
            }
          },
          "smtpServer": {
            "type": "object",
            "additionalProperties": true
          },
          "sslRequired": {
            "type": "string"
          },
          "ssoSessionIdleTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "ssoSessionIdleTimeoutRememberMe": {
            "type": "integer",
            "format": "int32"
          },
          "ssoSessionMaxLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "ssoSessionMaxLifespanRememberMe": {
            "type": "integer",
            "format": "int32"
          },
          "supportedLocales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userFederationMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFederationMapperRepresentation"
            }
          },
          "userFederationProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFederationProviderRepresentation"
            }
          },
          "userManagedAccessAllowed": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRepresentation"
            }
          },
          "verifyEmail": {
            "type": "boolean"
          },
          "waitIncrementSeconds": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RequiredActionProviderRepresentation": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "defaultAction": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "providerId": {
            "type": "string"
          }
        }
      },
      "ResourceRepresentation": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": true
          },
          "displayName": {
            "type": "string"
          },
          "icon_uri": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownerManagedAccess": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeRepresentation"
            }
          },
          "type": {
            "type": "string"
          },
          "uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResourceServerRepresentation": {
        "type": "object",
        "properties": {
          "allowRemoteResourceManagement": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRepresentation"
            }
          },
          "policyEnforcementMode": {
            "type": "string",
            "enum": [
              "ENFORCING",
              "PERMISSIVE",
              "DISABLED"
            ]
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRepresentation"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeRepresentation"
            }
          }
        }
      },
      "RoleRepresentation": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": true
          },
          "clientRole": {
            "type": "boolean"
          },
          "composite": {
            "type": "boolean"
          },
          "composites": {
            "$ref": "#/components/schemas/RoleRepresentation-Composites"
          },
          "containerId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RoleRepresentation-Composites": {
        "type": "object",
        "properties": {
          "client": {
            "type": "object",
            "additionalProperties": true
          },
          "realm": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RolesRepresentation": {
        "type": "object",
        "properties": {
          "client": {
            "type": "object",
            "additionalProperties": true
          },
          "realm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRepresentation"
            }
          }
        }
      },
      "ScopeMappingRepresentation": {
        "type": "object",
        "properties": {
          "client": {
            "type": "string"
          },
          "clientScope": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "self": {
            "type": "string"
          }
        }
      },
      "ScopeRepresentation": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "iconUri": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRepresentation"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRepresentation"
            }
          }
        }
      },
      "ServerInfoRepresentation": {
        "type": "object",
        "properties": {
          "builtinProtocolMappers": {
            "type": "object",
            "additionalProperties": true
          },
          "clientImporters": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "clientInstallations": {
            "type": "object",
            "additionalProperties": true
          },
          "componentTypes": {
            "type": "object",
            "additionalProperties": true
          },
          "enums": {
            "type": "object",
            "additionalProperties": true
          },
          "identityProviders": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "memoryInfo": {
            "$ref": "#/components/schemas/MemoryInfoRepresentation"
          },
          "passwordPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordPolicyTypeRepresentation"
            }
          },
          "profileInfo": {
            "$ref": "#/components/schemas/ProfileInfoRepresentation"
          },
          "protocolMapperTypes": {
            "type": "object",
            "additionalProperties": true
          },
          "providers": {
            "type": "object",
            "additionalProperties": true
          },
          "socialProviders": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "systemInfo": {
            "$ref": "#/components/schemas/SystemInfoRepresentation"
          },
          "themes": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "SpiInfoRepresentation": {
        "type": "object",
        "properties": {
          "internal": {
            "type": "boolean"
          },
          "providers": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "SynchronizationResult": {
        "type": "object",
        "properties": {
          "added": {
            "type": "integer",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "format": "int32"
          },
          "ignored": {
            "type": "boolean"
          },
          "removed": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "updated": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SystemInfoRepresentation": {
        "type": "object",
        "properties": {
          "fileEncoding": {
            "type": "string"
          },
          "javaHome": {
            "type": "string"
          },
          "javaRuntime": {
            "type": "string"
          },
          "javaVendor": {
            "type": "string"
          },
          "javaVersion": {
            "type": "string"
          },
          "javaVm": {
            "type": "string"
          },
          "javaVmVersion": {
            "type": "string"
          },
          "osArchitecture": {
            "type": "string"
          },
          "osName": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "serverTime": {
            "type": "string"
          },
          "uptime": {
            "type": "string"
          },
          "uptimeMillis": {
            "type": "integer",
            "format": "int64"
          },
          "userDir": {
            "type": "string"
          },
          "userLocale": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "userTimezone": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "UserConsentRepresentation": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "createdDate": {
            "type": "integer",
            "format": "int64"
          },
          "grantedClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastUpdatedDate": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "UserFederationMapperRepresentation": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "federationMapperType": {
            "type": "string"
          },
          "federationProviderDisplayName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserFederationProviderRepresentation": {
        "type": "object",
        "properties": {
          "changedSyncPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "config": {
            "type": "object",
            "additionalProperties": true
          },
          "displayName": {
            "type": "string"
          },
          "fullSyncPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "lastSync": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "providerName": {
            "type": "string"
          }
        }
      },
      "UserRepresentation": {
        "type": "object",
        "properties": {
          "access": {
            "type": "object",
            "additionalProperties": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": true
          },
          "clientConsents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserConsentRepresentation"
            }
          },
          "clientRoles": {
            "type": "object",
            "additionalProperties": true
          },
          "createdTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialRepresentation"
            }
          },
          "disableableCredentialTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "federatedIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FederatedIdentityRepresentation"
            }
          },
          "federationLink": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "notBefore": {
            "type": "integer",
            "format": "int32"
          },
          "origin": {
            "type": "string"
          },
          "realmRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requiredActions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "self": {
            "type": "string"
          },
          "serviceAccountClientId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserSessionRepresentation": {
        "type": "object",
        "properties": {
          "clients": {
            "type": "object",
            "additionalProperties": true
          },
          "id": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "lastAccess": {
            "type": "integer",
            "format": "int64"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      }
    }
  },
  "security": [
    {
      "access_token": []
    }
  ],
  "externalDocs": {
    "description": "Schema source code",
    "url": "https://github.com/keycloak/keycloak/tree/6.0.1/core/src/main/java/org/keycloak/representations"
  }
}
